
format elfobj64

include "common.oh"

include "header.oh"

const PTRACE_TRACEME=0

#-1 or different
functionx odbg_init(sv argv)
	#vfork is not cloning the memory like fork, but same 0,pid return and maybe same -1 error

	sd ret

	importx "vfork" vfork
	setcall ret vfork()

	if ret!=-1
		if ret=0
			importx "ptrace" ptrace

			setcall ret ptrace((PTRACE_TRACEME),0,0,0)
			#"pid, addr, and data are ignored."
			#on conv64 is not required to pass them but on 32 an implementation can overwrite them and pass them further
			#it's better to mimic c and pass them all instead of divide them further for 64, for understandability
			#glibc says ptrace is variadic (arg1,...) but man: long ptrace(enum __ptrace_request request, pid_t pid, void *addr, void *data)

			if ret!=-1
				#will return to parent at this call, child will never return
				importx "execve" execve
				importx "__environ" environ
				sv env^environ
				call execve(argv#,argv,env#)
			endif

			importx "_exit" exit
			call exit(0) #we are ignoring first argument since it is not used here
			#same like at ptrace+exit status is not ignored inside
		endif

		sd proc;set proc ret

		import "wait_pid" wait_pid
		setcall ret wait_pid(proc)
		if ret!=-1
			#orig_rax==0x3b  execve
			import "trap_at_entry" trap_at_entry
			setcall ret trap_at_entry(proc,argv#)
			if ret!=-1
				import "collect_program" collect_program
				setcall ret collect_program(argv#)
			endif
		endif
	endif

	return ret
endfunction

functionx odbg_free()
	import "files" files
	sv p;setcall p files()
	set p p#
	sv cursor;set cursor p
	importx "free" free
	while cursor#!=(NULL)
		call free(cursor#:file.path)
		call free(cursor#:file.lines)
		add cursor (\\file)
	endwhile
	call free(p)
endfunction
